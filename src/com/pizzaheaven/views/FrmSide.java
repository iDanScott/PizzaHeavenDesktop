/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pizzaheaven.views;

import java.awt.BorderLayout;
import java.awt.event.WindowEvent;
import java.util.regex.Pattern;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import pizzaheaven.controllers.ImagesController;
import pizzaheaven.controllers.SideController;
import pizzaheaven.helpers.ImageHelpers;
import pizzaheaven.helpers.StringHelpers;
import pizzaheaven.models.Image;
import pizzaheaven.models.Session;
import pizzaheaven.models.Side;

/**
 *
 * @author dan
 */
public class FrmSide extends javax.swing.JFrame {

    private Boolean editMode = false;
    private Boolean modified = false;
    /**
     * Creates new form FrmSides
     */
    public FrmSide() {
        initComponents();
        initialiseImageCombo();
        
    }
    
    public FrmSide(Side side) {
        initComponents();
        initialiseImageCombo();
        editMode = true;
        txtSideName.setEnabled(false);
        this.txtSideName.setText(side.getName());
        this.txtSideDescription.setText(side.getDescription());
        this.txtSidePricePound.setValue(Double.valueOf(side.getPrice().split(Pattern.quote("."))[0]));
        this.txtSidePricePence.setValue(Double.valueOf(side.getPrice().split(Pattern.quote("."))[1]));
        this.txtHeatRating.setValue(Double.valueOf(side.getHeatRating()));
        initialiseImageCombo();
         for (int i = 0; i < this.cboImages.getItemCount(); i++) {
            Image selectedImage = (Image)(Object)cboImages.getItemAt(i);
            if (selectedImage.getName().equals(side.getImage())) {
                cboImages.setSelectedIndex(i);
            }
        }
    }
    
    private void initialiseImageCombo() {
        JComboBox temp = new JComboBox(((ImagesController)Session.get().getController("ImagesController")).get());
        this.cboImages.setModel(temp.getModel());
    }
    
    private Image getSelectedImage() {
        Object selectedObject = (Object)this.cboImages.getSelectedItem();
        if (selectedObject instanceof Image) {
            return (Image)selectedObject;
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSideName = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        btnUploadImage = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtSideDescription = new javax.swing.JTextField();
        cboImages = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtHeatRating = new javax.swing.JSpinner();
        txtSidePricePound = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        pnlImagePreview = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        txtSidePricePence = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pizza Heaven - Manager Application - Sides");
        setResizable(false);

        txtSideName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSideNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSideNameKeyTyped(evt);
            }
        });

        jLabel14.setText("Image Preview");
        jLabel14.setToolTipText("");

        btnUploadImage.setText("Upload Image...");
        btnUploadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadImageActionPerformed(evt);
            }
        });

        jLabel2.setText("Side Description");

        txtSideDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSideDescriptionKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSideDescriptionKeyTyped(evt);
            }
        });

        cboImages.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboImagesActionPerformed(evt);
            }
        });

        jLabel3.setText("Side Price");

        btnClose.setText("Cancel");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        jLabel4.setText("Side Heat Rating");

        jLabel6.setText("Image Name");
        jLabel6.setToolTipText("");

        txtHeatRating.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 3.0d, 1.0d));

        txtSidePricePound.setModel(new javax.swing.SpinnerNumberModel());

        jLabel5.setText("Â£");

        jLabel13.setText("p");

        pnlImagePreview.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlImagePreview.setPreferredSize(null);

        btnSave.setText("Save ");
        btnSave.setToolTipText("Save & Close");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtSidePricePence.setModel(new javax.swing.SpinnerNumberModel());

        jLabel1.setText("Side Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pnlImagePreview, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                                    .addComponent(btnUploadImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cboImages, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtHeatRating)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(6, 6, 6)
                                        .addComponent(txtSidePricePound, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSidePricePence, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13))
                                    .addComponent(txtSideDescription)
                                    .addComponent(txtSideName))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSideName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSideDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSidePricePence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSidePricePound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHeatRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cboImages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUploadImage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(pnlImagePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSideNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSideNameKeyTyped
        // TODO add your handling code here:
        if (txtSideName.getText().length() >= 20) {
            evt.consume();
        } else {
            modified = true;
        }
    }//GEN-LAST:event_txtSideNameKeyTyped

    private void txtSideNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSideNameKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtSideNameKeyPressed

    private void btnUploadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadImageActionPerformed
        // TODO add your handling code here:
        FrmImage frmImage = new FrmImage();
        frmImage.setVisible(true);
    }//GEN-LAST:event_btnUploadImageActionPerformed

    private void txtSideDescriptionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSideDescriptionKeyTyped
        // TODO add your handling code here:
        if (txtSideDescription.getText().length() >= 250) {
            evt.consume();
        } else {
            modified = true;
        }
    }//GEN-LAST:event_txtSideDescriptionKeyTyped

    private void txtSideDescriptionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSideDescriptionKeyPressed
        // TODO add your handling code here:
        if (txtSideName.getText().length() >= 250) {
            evt.consume();
        } else {
            modified = true;
        }
    }//GEN-LAST:event_txtSideDescriptionKeyPressed

    private void cboImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboImagesActionPerformed
        // TODO add your handling code here:
        Image[] imageList = ((ImagesController)Session.get().getController("ImagesController")).get();
        pnlImagePreview.removeAll();
        for (Image image : imageList) {
            if (image.getName().equals(getSelectedImage().getName())) {
                JLabel temp = new JLabel();
                Icon icon = new ImageIcon(ImageHelpers.base64Decode(image));
                temp.setIcon(icon);
                pnlImagePreview.add(temp, BorderLayout.CENTER);
                pnlImagePreview.revalidate();
                pnlImagePreview.repaint();
            }
        }

    }//GEN-LAST:event_cboImagesActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        if (modified) {
            int result = JOptionPane.showConfirmDialog(this, "You have unsaved changes. Are you sure you want to exit?", "Unsaved Changes", JOptionPane.YES_NO_OPTION);
            if (result != JOptionPane.YES_OPTION) {
                return;
            }
        }
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
        // TODO add your handling code here:
        if (modified) {
            int result = JOptionPane.showConfirmDialog(this, "You have unsaved changes Are you sure you want to exit?", "Unsaved Changes", JOptionPane.YES_NO_OPTION);
            if (result != JOptionPane.YES_OPTION) {
                return;
            } 
        }
    }  
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Side sideToAdd = new Side();
        sideToAdd.setName(this.txtSideName.getText());
        sideToAdd.setDescription(this.txtSideDescription.getText());
        sideToAdd.setHeatRating(String.valueOf(this.txtHeatRating.getValue()));
        sideToAdd.setPrice(String.valueOf(this.txtSidePricePound.getValue())
           + "." + StringHelpers.formatPence((Integer)this.txtSidePricePound.getValue()));
        sideToAdd.setImage(getSelectedImage().getName());
        int apiResult;
       if (!editMode) {
            apiResult = ((SideController)Session.get().getController("SideController")).add(sideToAdd);
        } else {
            apiResult = ((SideController)Session.get().getController("SideController")).update(sideToAdd);
        }
        if (apiResult == 201 || apiResult == 204) {
            int result = JOptionPane.showConfirmDialog(this, "Your side " + sideToAdd.getName() + (apiResult == 201 ?  "  has been created" : "has been updated"), "Save Confirmation", JOptionPane.OK_CANCEL_OPTION);
                      if (result == JOptionPane.OK_OPTION) {
                modified = false;
                this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error contacting the API. Response code: " + apiResult + ". If the problem persists, please seek technical advice", "API Connectivity Error", JOptionPane.ERROR_MESSAGE);
            
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmSide().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnClose;
    public javax.swing.JButton btnSave;
    private javax.swing.JButton btnUploadImage;
    private javax.swing.JComboBox<String> cboImages;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel pnlImagePreview;
    private javax.swing.JSpinner txtHeatRating;
    private javax.swing.JTextField txtSideDescription;
    private javax.swing.JTextField txtSideName;
    private javax.swing.JSpinner txtSidePricePence;
    private javax.swing.JSpinner txtSidePricePound;
    // End of variables declaration//GEN-END:variables
}
